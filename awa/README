

Run: 
	mvn -P dev install tomcat7:run


1.) Setup Oracle Java 1.7 and add the JAVA_HOME environment variable to the PATH
	Ref: https://confluence.atlassian.com/doc/setting-the-java_home-variable-in-windows-8895.html
	Verify: java -version

2.) Setup Apache Maven 3.0.5 and add MAVEN_HOME environment variable to the PATH
	Ref: https://maven.apache.org/install.html
	Verify:  mvn --version

3.) Change directory to the path where pom.xml is for the REST project
	Build: mvn install
	Verify the awr.jar in the target folder
	
	A maven profile is created to allow custom build, package and test configurations.
	Usage: 	mvn -P dev install
			mvn -P dev install tomcat7:run 

4.) Move the rest.jar to the webapp folder of the Tomcat installation
	Setup: https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html
	Start the server and verify whether the server has started on a port (8088 is where my Tomcat listens). 
	Verify:	http://localhost:8088/
			http://localhost:8088/awr/
			http://localhost:8088/awr/index.jsp

5.) Setup a local instance of mysql database server with workbench
	Download: https://dev.mysql.com/downloads/windows/installer/5.7.html
	Make sure the mysql database server is up and running.
	Create a connection to the localhost server using the workbench

6.) Open RestDbModel.mwb with MySql Workbench
	Go to the database menu and select forward engineer.
	Select the localhost connection. Go next in order to insert and export Mysql table objects.
	Open up the workbench localhost connection and verify that the country table has some data.

7.) Configure the database connections in src/main/resources/database/database_local.properties

8.) Run the final API test in the browser that gets you country data from the Mysql DB
	http://localhost:8088/awr/countries
	http://localhost:8088/awr/countries.json
	http://localhost:8088/awr/countries.xml
	http://localhost:8088/awr/countries/in
	http://localhost:8088/awr/countries/in.json
	http://localhost:8088/awr/countries/in.xml
	
	You should also go in the developer tools of chrome browser to verify the Networks calls made to the server and their response.

9.) Swagger Documentation
	Check the api-docs end point and then the swagger page for documentation
	http://localhost:8088/awr/v2/api-docs
	http://localhost:8088/awr/swagger-ui.html




http://localhost:8087/awa/oauth/token?grant_type=password&client_id=awa-web&client_secret=testsecret&username=beingjavaguys&password=spring@java 



